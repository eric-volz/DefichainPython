== Accounts ==

accounthistorycount ( "owner" {"no_rewards":bool,"token":"str","txtype":"str"} )

accounttoaccount "from" {"address":"str"} ( [{"txid":"hex","vout":n},...] )

accounttoutxos "from" {"address":"str"} ( [{"txid":"hex","vout":n},...] )

executesmartcontract "name" "amount" ( "address" [{"txid":"hex","vout":n},...] )

futureswap "address" "amount" ( "destination" [{"txid":"hex","vout":n},...] )

getaccount "owner" ( {"start":"str","including_start":bool,"limit":n} indexed_amounts )

getaccounthistory "owner" blockHeight txn

getburninfo

getpendingfutureswaps "address"

gettokenbalances ( {"start":"str","including_start":bool,"limit":n} indexed_amounts symbol_lookup )

listaccounthistory ( "owner" {"maxBlockHeight":n,"depth":n,"no_rewards":bool,"token":"str","txtype":"str","limit":n,"txn":n} )

listaccounts ( {"start":"str","including_start":bool,"limit":n} verbose indexed_amounts is_mine_only )

listburnhistory ( {"maxBlockHeight":n,"depth":n,"token":"str","txtype":"str","limit":n} )

listcommunitybalances

listpendingfutureswaps

sendtokenstoaddress {"address":"str"} {"address":"str"} ( "selectionMode" )

sendutxosfrom "from" "to" amount ( "change" )

utxostoaccount {"address":"str"} ( [{"txid":"hex","vout":n},...] )

withdrawfutureswap "address" "amount" ( "destination" [{"txid":"hex","vout":n},...] )



== Blockchain ==

clearmempool

getbestblockhash

getblock "blockhash" ( verbosity )

getblockchaininfo

getblockcount

getblockfilter "blockhash" ( "filtertype" )

getblockhash height

getblockheader "blockhash" ( verbose )

getblockstats hash_or_height ( stats )

getchaintips

getchaintxstats ( nblocks "blockhash" )

getdifficulty

getgov "name"

getmempoolancestors "txid" ( verbose )

getmempooldescendants "txid" ( verbose )

getmempoolentry "txid"

getmempoolinfo

getrawmempool ( verbose )

gettxout "txid" n ( include_mempool )

gettxoutproof ["txid",...] ( "blockhash" )

gettxoutsetinfo

isappliedcustomtx "txid" blockHeight

listgovs ( "prefix" )

listsmartcontracts

preciousblock "blockhash"

pruneblockchain height

savemempool

scantxoutset "action" [scanobjects,...]

setgov {"name":"str"} ( [{"txid":"hex","vout":n},...] )

setgovheight {"name":"str"} height ( [{"txid":"hex","vout":n},...] )

verifychain ( checklevel nblocks )

verifytxoutproof "proof"



== Control ==

getmemoryinfo ( "mode" )

getrpcinfo

help ( "command" )

logging ( ["include_category",...] ["exclude_category",...] )

stop

uptime



== Generating ==

generatetoaddress nblocks "address" ( maxtries )



== Icxorderbook ==

icx_claimdfchtlc ( {"dfchtlcTx":"str","seed":"str"} [{"txid":"hex","vout":n},...] )

icx_closeoffer "offerTx" ( [{"txid":"hex","vout":n},...] )

icx_closeorder "orderTx" ( [{"txid":"hex","vout":n},...] )

icx_createorder {"tokenFrom|chainFrom":"str","chainTo|tokenTo":"str","ownerAddress":"str","receivePubkey":"str","amountFrom":n,"orderPrice":n,"expiry":n} ( [{"txid":"hex","vout":n},...] )

icx_getorder "orderTx"

icx_listhtlcs {"offerTx":"str","limit":n,"closed":bool}

icx_listorders ( {"token":n,"chain":n,"orderTx":"str","limit":n,"closed":bool} )

icx_makeoffer ( {"orderTx":"str","amount":n,"ownerAddress":"str","receivePubkey":"str","expiry":n} [{"txid":"hex","vout":n},...] )

icx_submitdfchtlc ( {"offerTx":"str","amount":n,"hash":"str","timeout":n} [{"txid":"hex","vout":n},...] )

icx_submitexthtlc ( {"offerTx":"str","amount":n,"htlcScriptAddress":"str","hash":"str","ownerPubkey":"str","timeout":n} [{"txid":"hex","vout":n},...] )



== Loan ==

createloanscheme mincolratio interestrate "id" ( [{"txid":"hex","vout":n},...] )

destroyloanscheme "id" ( ACTIVATE_AFTER_BLOCK [{"txid":"hex","vout":n},...] )

getcollateraltoken "token"

getinterest "id" ( "token" )

getloaninfo

getloanscheme "id"

getloantoken "token"

listcollateraltokens

listloanschemes

listloantokens

paybackloan {"vaultId":"hex","from":"str","amounts":"str","loans":[{"dToken":"str","amounts":"str"},...]} ( [{"txid":"hex","vout":n},...] )

setcollateraltoken {"token":"str","factor":n,"fixedIntervalPriceId":"hex","activateAfterBlock":n} ( [{"txid":"hex","vout":n},...] )

setdefaultloanscheme "id" ( [{"txid":"hex","vout":n},...] )

setloantoken {"symbol":"str","name":"str","fixedIntervalPriceId":"hex","mintable":bool,"interest":n} ( [{"txid":"hex","vout":n},...] )

takeloan {"vaultId":"hex","to":"str","amounts":"str"} ( [{"txid":"hex","vout":n},...] )

updateloanscheme mincolratio interestrate "id" ( ACTIVATE_AFTER_BLOCK [{"txid":"hex","vout":n},...] )

updateloantoken "token" {"symbol":"str","name":"str","fixedIntervalPriceId":"hex","mintable":bool,"interest":n} ( [{"txid":"hex","vout":n},...] )



== Masternodes ==

createmasternode "ownerAddress" ( "operatorAddress" [{"txid":"hex","vout":n},...] "timelock" )

getactivemasternodecount ( blockCount )

getanchorteams ( blockHeight )

getmasternode "mn_id"

getmasternodeblocks ( {"id":"hex","ownerAddress":"str","operatorAddress":"str"} depth )

listanchors

listmasternodes ( {"start":"hex","including_start":bool,"limit":n} verbose )

resignmasternode "mn_id" ( [{"txid":"hex","vout":n},...] )



== Mining ==

getblocktemplate ( "template_request" )

getmininginfo

getmintinginfo

getnetworkhashps ( nblocks height )

prioritisetransaction "txid" ( dummy ) fee_delta

submitblock "hexdata" ( "dummy" )

submitheader "hexdata"



== Network ==

addnode "node" "command"

clearbanned

disconnectnode ( "address" nodeid )

getaddednodeinfo ( "node" )

getconnectioncount

getnettotals

getnetworkinfo

getnodeaddresses ( count )

getpeerinfo

getversioninfo

listbanned

ping

setban "subnet" "command" ( bantime absolute )

setnetworkactive state



== Oracles ==

appointoracle "address" [{"currency":"str","token":"str"},...] weightage ( [{"txid":"hex","vout":n},...] )

getfixedintervalprice "fixedIntervalPriceId"

getfutureswapblock

getoracledata "oracleid"

getprice {"currency":"str","token":"str"}

listfixedintervalprices ( {"start":n,"limit":n} )

listlatestrawprices ( {"currency":"str","token":"str"} {"start":"hex","including_start":bool,"limit":n} )

listoracles ( {"start":"hex","including_start":bool,"limit":n} )

listprices ( {"start":n,"including_start":bool,"limit":n} )

removeoracle "oracleid" ( [{"txid":"hex","vout":n},...] )

setoracledata "oracleid" timestamp [{"currency":"str","tokenAmount":"str"},...] ( [{"txid":"hex","vout":n},...] )

updateoracle "oracleid" "address" [{"currency":"str","token":"str"},...] weightage ( [{"txid":"hex","vout":n},...] )



== Poolpair ==

addpoolliquidity {"address":"str"} "shareAddress" ( [{"txid":"hex","vout":n},...] )

compositeswap {"from":"str","tokenFrom":"str","amountFrom":n,"to":"str","tokenTo":"str","maxPrice":n} ( [{"txid":"hex","vout":n},...] )

createpoolpair ( {"tokenA":"str","tokenB":"str","commission":n,"status":bool,"ownerAddress":"str","customRewards":"str","pairSymbol":"str"} [{"txid":"hex","vout":n},...] )

getpoolpair "key" ( verbose )

listpoolpairs ( {"start":n,"including_start":bool,"limit":n} verbose )

listpoolshares ( {"start":n,"including_start":bool,"limit":n} verbose is_mine_only )

poolswap {"from":"str","tokenFrom":"str","amountFrom":n,"to":"str","tokenTo":"str","maxPrice":n} ( [{"txid":"hex","vout":n},...] )

removepoolliquidity "from" "amount" ( [{"txid":"hex","vout":n},...] )

testpoolswap ( {"from":"str","tokenFrom":"str","amountFrom":n,"to":"str","tokenTo":"str","maxPrice":n} "path" verbose )

updatepoolpair ( {"pool":"str","status":bool,"commission":n,"ownerAddress":"str","customRewards":"str"} [{"txid":"hex","vout":n},...] )



== Rawtransactions ==

analyzepsbt "psbt"

combinepsbt ["psbt",...]

combinerawtransaction ["hexstring",...]

converttopsbt "hexstring" ( permitsigdata iswitness )

createpsbt [{"txid":"hex","vout":n,"sequence":n},...] [{"address":amount},{"data":"hex"},...] ( locktime replaceable )

createrawtransaction [{"txid":"hex","vout":n,"sequence":n},...] [{"address":amount},{"data":"hex"},...] ( locktime replaceable )

decodepsbt "psbt"

decoderawtransaction "hexstring" ( iswitness )

decodescript "hexstring"

finalizepsbt "psbt" ( extract )

fundrawtransaction "hexstring" ( options iswitness )

getrawtransaction "txid" ( verbose "blockhash" )

joinpsbts ["psbt",...]

sendrawtransaction "hexstring" ( maxfeerate )

signrawtransactionwithkey "hexstring" ["privatekey",...] ( [{"txid":"hex","vout":n,"scriptPubKey":"hex","redeemScript":"hex","witnessScript":"hex","amount":amount},...] "sighashtype" )

testmempoolaccept ["rawtx",...] ( maxfeerate )

utxoupdatepsbt "psbt" ( ["",{"desc":"str","range":n or [n,n]},...] )



== Spv ==

spv_claimhtlc "scriptaddress" "destinationaddress" "seed" ( feerate )

spv_createanchor ( [{"txid":"hex","vout":n,"amount":n,"privkey":"str"},...] ) "rewardAddress" ( send feerate )

spv_createanchortemplate "rewardAddress"

spv_createhtlc "receiverPubkey" "ownerPubkey" "timeout" ( "seed" )

spv_decodehtlcscript "redeemscript"

spv_dumpprivkey "address"

spv_estimateanchorcost ( feerate )

spv_getaddresspubkey "address"

spv_getalladdresses

spv_getbalance

spv_getfeerate

spv_gethtlcseed "address"

spv_getnewaddress

spv_getpeers

spv_getrawtransaction "txid"

spv_gettxconfirmations "txhash"

spv_listanchorauths

spv_listanchorrewardconfirms

spv_listanchorrewards

spv_listanchors ( minBtcHeight maxBtcHeight minConfs maxConfs startBtcHeight limit )

spv_listanchorspending

spv_listanchorsunrewarded

spv_listhtlcoutputs ( "address" )

spv_listreceivedbyaddress ( minconf "address_filter" )

spv_listtransactions

spv_refundhtlc "scriptaddress" "destinationaddress" ( feerate )

spv_refundhtlcall "destinationaddress" ( feerate )

spv_rescan ( height )

spv_sendrawtx "rawtx"

spv_sendtoaddress "address" amount ( feerate )

spv_syncstatus

spv_validateaddress "address"



== Stats ==

getrpcstats "command"

listrpcstats



== Tokens ==

createtoken ( {"symbol":"str","name":"str","isDAT":bool,"decimal":n,"limit":n,"mintable":bool,"tradeable":bool,"collateralAddress":"str"} [{"txid":"hex","vout":n},...] )

decodecustomtx "hexstring" ( iswitness )

getcustomtx "txid" ( "blockhash" )

gettoken "key"

listtokens ( {"start":n,"including_start":bool,"limit":n} verbose )

minttokens "amounts" ( [{"txid":"hex","vout":n},...] )

updatetoken "token" ( {"symbol":"str","name":"str","isDAT":bool,"mintable":bool,"tradeable":bool,"finalize":bool} [{"txid":"hex","vout":n},...] )



== Util ==

createmultisig nrequired ["key",...] ( "address_type" )

deriveaddresses "descriptor" ( range )

estimatesmartfee conf_target ( "estimate_mode" )

getdescriptorinfo "descriptor"

signmessagewithprivkey "privkey" "message"

validateaddress "address"

verifymessage "address" "signature" "message"



== Vault ==

closevault "vaultId" "to" ( [{"txid":"hex","vout":n},...] )

createvault "ownerAddress" ( "loanSchemeId" [{"txid":"hex","vout":n},...] )

deposittovault "vaultId" "from" "amount" ( [{"txid":"hex","vout":n},...] )

estimatecollateral "loanAmounts" targetRatio ( {"split":n} )

estimateloan "vaultId" {"split":n} ( targetRatio )

estimatevault "collateralAmounts" "loanAmounts"

getvault "vaultId"

listauctionhistory ( "owner|vaultId" {"maxBlockHeight":n,"vaultId":"hex","index":n,"limit":n} )

listauctions ( {"start":obj,"including_start":bool,"limit":n} )

listvaulthistory "vaultId" ( {"maxBlockHeight":n,"depth":n,"token":"str","txtype":"str","limit":n} )

listvaults ( {"ownerAddress":"str","loanSchemeId":"str","state":"str","verbose":bool} {"start":"hex","including_start":bool,"limit":n} )

placeauctionbid "vaultId" index "from" "amount" ( [{"txid":"hex","vout":n},...] )

updatevault "vaultId" {"ownerAddress":"hex","loanSchemeId":"str"} ( [{"txid":"hex","vout":n},...] )

withdrawfromvault "vaultId" "to" "amount" ( [{"txid":"hex","vout":n},...] )



== Wallet ==

abandontransaction "txid"

abortrescan

addmultisigaddress nrequired ["key",...] ( "label" "address_type" )

backupwallet "destination"

bumpfee "txid" ( options )

createwallet "wallet_name" ( disable_private_keys blank "passphrase" avoid_reuse )

dumpprivkey "address"

dumpwallet "filename"

encryptwallet "passphrase"

getaddressesbylabel "label"

getaddressinfo "address"

getbalance ( "dummy" minconf include_watchonly avoid_reuse with_tokens )

getbalances ( with_tokens )

getnewaddress ( "label" "address_type" )

getrawchangeaddress ( "address_type" )

getreceivedbyaddress "address" ( minconf )

getreceivedbylabel "label" ( minconf )

gettransaction "txid" ( include_watchonly )

getunconfirmedbalance ( with_tokens )

getwalletinfo ( with_tokens )

importaddress "address" ( "label" rescan p2sh )

importmulti "requests" ( "options" )

importprivkey "privkey" ( "label" rescan )

importprunedfunds "rawtransaction" "txoutproof"

importpubkey "pubkey" ( "label" rescan )

importwallet "filename"

keypoolrefill ( newsize )

listaddressgroupings

listlabels ( "purpose" )

listlockunspent

listreceivedbyaddress ( minconf include_empty include_watchonly "address_filter" )

listreceivedbylabel ( minconf include_empty include_watchonly )

listsinceblock ( "blockhash" target_confirmations include_watchonly include_removed )

listtransactions ( "label" count skip include_watchonly exclude_custom_tx )

listunspent ( minconf maxconf ["address",...] include_unsafe query_options )

listwalletdir

listwallets

loadwallet "filename"

lockunspent unlock ( [{"txid":"hex","vout":n},...] )

removeprunedfunds "txid"

rescanblockchain ( start_height stop_height )

sendmany "" {"address":amount} ( minconf "comment" ["address",...] replaceable conf_target "estimate_mode" )

sendtoaddress "address" amount ( "comment" "comment_to" subtractfeefromamount replaceable conf_target "estimate_mode" avoid_reuse )

sethdseed ( newkeypool "seed" )

setlabel "address" "label"

settxfee amount

setwalletflag "flag" ( value )

signmessage "address" "message"

signrawtransactionwithwallet "hexstring" ( [{"txid":"hex","vout":n,"scriptPubKey":"hex","redeemScript":"hex","witnessScript":"hex","amount":amount},...] "sighashtype" )

unloadwallet ( "wallet_name" )

walletcreatefundedpsbt [{"txid":"hex","vout":n,"sequence":n},...] [{"address":amount},{"data":"hex"},...] ( locktime options bip32derivs )

walletlock

walletpassphrase "passphrase" timeout

walletpassphrasechange "oldpassphrase" "newpassphrase"

walletprocesspsbt "psbt" ( sign "sighashtype" bip32derivs )



== Zmq ==

getzmqnotifications
